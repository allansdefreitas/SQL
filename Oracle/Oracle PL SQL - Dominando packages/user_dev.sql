--Tabelas

CREATE TABLE "USER_DEV"."PRODUTO_EXERCICIO" (
    "COD" VARCHAR2(5 BYTE), 
    "DESCRICAO" VARCHAR2(100 BYTE), 
    "CATEGORIA" VARCHAR2(100 BYTE)
);

CREATE UNIQUE INDEX "USER_DEV"."PRODUTO_EXERCICIO_COD_PK" ON "USER_DEV"."PRODUTO_EXERCICIO" ("COD") ;

ALTER TABLE "USER_DEV"."PRODUTO_EXERCICIO" ADD CONSTRAINT "PRODUTO_EXERCICIO_COD_PK" PRIMARY KEY ("COD");

CREATE TABLE "USER_DEV"."PRODUTO_VENDA_EXERCICIO" 
   (    "ID" NUMBER(5,0), 
    "COD_PRODUTO" VARCHAR2(5 BYTE), 
    "DATA" DATE, 
    "QUANTIDADE" FLOAT(126), 
    "PRECO" FLOAT(126), 
    "VALOR_TOTAL" FLOAT(126), 
    "PERCENTUAL_IMPOSTO" FLOAT(126)
   );

CREATE UNIQUE INDEX "USER_DEV"."PRODUTO_VENDA_EXERCICIO_ID_PK" ON "USER_DEV"."PRODUTO_VENDA_EXERCICIO" ("ID") ;

ALTER TABLE "USER_DEV"."PRODUTO_VENDA_EXERCICIO" ADD CONSTRAINT "PRODUTO_VENDA_EXERCICIO_ID_PK" PRIMARY KEY ("ID");

ALTER TABLE "USER_DEV"."PRODUTO_VENDA_EXERCICIO" ADD CONSTRAINT "PRODUTO_VENDA_EXERCICIO_PRODUTO_EXERCICIO_COD" FOREIGN KEY ("COD_PRODUTO") 
    REFERENCES "USER_DEV"."PRODUTO_EXERCICIO" ("COD");

Insert into PRODUTO_EXERCICIO (COD,DESCRICAO,CATEGORIA) values ('41232','Sabor de Verão > Laranja > 1 Litro','Sucos de Frutas');
Insert into PRODUTO_EXERCICIO (COD,DESCRICAO,CATEGORIA) values ('32223','Sabor de Verão > Uva > 1 Litro','Sucos de Frutas');
Insert into PRODUTO_EXERCICIO (COD,DESCRICAO,CATEGORIA) values ('67120','Frescor da Montanha > Aroma Limão > 1 Litro','Águas');
Insert into PRODUTO_EXERCICIO (COD,DESCRICAO,CATEGORIA) values ('92347','Aroma do Campo > Mate > 1 Litro','Mate');
Insert into PRODUTO_EXERCICIO (COD,DESCRICAO,CATEGORIA) values ('33854','Frescor da Montanha > Aroma Laranja > 1 Litro','Águas');

Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('1','41232',to_date('01/01/22','DD/MM/RR'),'100','10','1000','10');
Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('2','92347',to_date('01/01/22','DD/MM/RR'),'200','25','5000','15');
Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('3','41232',to_date('01/02/22','DD/MM/RR'),'250','20','5000','10');
Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('4','32223',to_date('03/02/22','DD/MM/RR'),'200','16','3200','10');
Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('5','92347',to_date('05/02/22','DD/MM/RR'),'200','16','3200','15');
Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('6','41232',to_date('02/03/22','DD/MM/RR'),'210','19','3990','10');
Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('7','33854',to_date('05/03/22','DD/MM/RR'),'180','21','3780','20');
Insert into PRODUTO_VENDA_EXERCICIO (ID,COD_PRODUTO,DATA,QUANTIDADE,PRECO,VALOR_TOTAL,PERCENTUAL_IMPOSTO) values ('8','92347',to_date('09/03/22','DD/MM/RR'),'170','20','3400','15');




-- Rotinas


create or replace FUNCTION RETORNA_CATEGORIA
(p_COD IN produto_exercicio.cod%type)
RETURN produto_exercicio.categoria%type
IS
   v_CATEGORIA produto_exercicio.categoria%type;
BEGIN
    SELECT CATEGORIA INTO v_CATEGORIA FROM PRODUTO_EXERCICIO WHERE COD = p_COD;
    RETURN v_CATEGORIA;
END;
/

create or replace FUNCTION RETORNA_IMPOSTO 
(p_COD_PRODUTO produto_venda_exercicio.cod_produto%type)
RETURN produto_venda_exercicio.percentual_imposto%type
IS
   v_CATEGORIA produto_exercicio.categoria%type;
   v_IMPOSTO produto_venda_exercicio.percentual_imposto%type;
BEGIN
    v_CATEGORIA := retorna_categoria(p_COD_PRODUTO);
    IF TRIM(v_CATEGORIA) = 'Sucos de Frutas' THEN
        v_IMPOSTO := 10;
    ELSIF TRIM(v_CATEGORIA) = 'Águas' THEN
        v_IMPOSTO := 20;
    ELSIF TRIM(v_CATEGORIA) = 'Mate' THEN
        v_IMPOSTO := 15;
    END IF;
    RETURN v_IMPOSTO;
END;
/

create or replace PROCEDURE CALCULA_IMPOSTO
(p_ID IN produto_venda_exercicio.id%type, p_VALOR_IMPOSTO OUT FLOAT)
IS
   v_PRECO produto_venda_exercicio.preco%type;
   v_QUANTIDADE produto_venda_exercicio.quantidade%type;
   v_PERCENTUAL_IMPOSTO produto_venda_exercicio.percentual_imposto%type;
BEGIN
   SELECT PRECO, QUANTIDADE, PERCENTUAL_IMPOSTO INTO v_PRECO, v_QUANTIDADE, v_PERCENTUAL_IMPOSTO
   FROM PRODUTO_VENDA_EXERCICIO WHERE ID = p_ID;
   p_VALOR_IMPOSTO := (v_PRECO * v_QUANTIDADE) * (v_PERCENTUAL_IMPOSTO/100);
END;
/

create or replace PROCEDURE INCLUINDO_DADOS_VENDA 
(
p_ID produto_venda_exercicio.id%type,
p_COD_PRODUTO produto_venda_exercicio.cod_produto%type,
p_DATA produto_venda_exercicio.data%type,
p_QUANTIDADE produto_venda_exercicio.quantidade%type,
p_PRECO produto_venda_exercicio.preco%type
)
IS
   v_VALOR produto_venda_exercicio.valor_total%type;
   v_PERCENTUAL produto_venda_exercicio.percentual_imposto%type;
BEGIN
   v_PERCENTUAL := retorna_imposto(p_COD_PRODUTO);
   v_VALOR := p_QUANTIDADE * p_PRECO;
   INSERT INTO PRODUTO_VENDA_EXERCICIO 
   (id, cod_produto, data, quantidade, preco, valor_total, percentual_imposto) 
   VALUES 
   (p_ID, p_COD_PRODUTO, p_DATA, p_QUANTIDADE, p_PRECO, v_VALOR, v_PERCENTUAL);
    COMMIT;
END;
/

create or replace PROCEDURE SOMA_VENDAS 
(p_VENDA_LIMITE IN produto_venda_exercicio.valor_total%type, p_ID_RETORNO OUT produto_venda_exercicio.id%type)
IS
   v_ID produto_venda_exercicio.id%type := 1;
   v_VALOR_TOTAL produto_venda_exercicio.valor_total%type;
   v_VENDA_TOTAL produto_venda_exercicio.valor_total%type := 0;
BEGIN
  LOOP
     SELECT VALOR_TOTAL INTO v_VALOR_TOTAL FROM PRODUTO_VENDA_EXERCICIO WHERE ID = v_ID;
     v_VENDA_TOTAL := v_VENDA_TOTAL + v_VALOR_TOTAL;
     IF v_VENDA_TOTAL >= p_VENDA_LIMITE THEN
        EXIT;
     END IF;
     v_ID := v_ID + 1;
  END LOOP;
  p_ID_RETORNO := v_ID;
END;
/

create or replace PROCEDURE INCLUINDO_PRODUTO 
(p_COD produto_exercicio.cod%type
, p_DESCRICAO produto_exercicio.descricao%type
, p_CATEGORIA produto_exercicio.categoria%type)
IS
BEGIN
   INSERT INTO PRODUTO_EXERCICIO (COD, DESCRICAO, CATEGORIA) VALUES (p_COD, REPLACE(p_DESCRICAO,'-','>')
   , p_CATEGORIA);
   COMMIT;
END;
/


-- Grants

GRANT EXECUTE ON ATUALIZAR_CLI_SEG_MERCADO TO user_app;
GRANT EXECUTE ON ATUALIZAR_FATURAMENTO_PREVISTO TO user_app;
GRANT EXECUTE ON INCLUIR_CLIENTE TO user_app;
GRANT EXECUTE ON EXCLUIR_CLIENTE TO user_app;


-- Insert sem procedure

SELECT * FROM CLIENTE;

INSERT INTO CLIENTE (ID, RAZAO_SOCIAL, CNPJ, SEGMERCADO_ID, DATA_INCLUSAO, FATURAMENTO_PREVISTO, CATEGORIA) 
VALUES (5, 'Padaria Sara Bella', '17/222', 1, TO_DATE('20/12/2024', 'DD/MM/YYYY'), 500000, 'PEQUENO');

ROLLBACK;


-- Grants
GRANT SELECT ON CLIENTE TO user_app;



GRANT EXECUTE ON INCLUINDO_PRODUTO TO user_app;
GRANT EXECUTE ON INCLUINDO_DADOS_VENDA TO user_app;
GRANT SELECT ON PRODUTO_EXERCICIO TO user_app;
GRANT SELECT ON PRODUTO_VENDA_EXERCICIO TO user_app;


-- Sinônimos
CREATE PUBLIC SYNONYM INCLUIR_CLIENTE FOR USER_DEV.INCLUIR_CLIENTE;
CREATE PUBLIC SYNONYM ATUALIZAR_CLI_SEG_MERCADO FOR USER_DEV.ATUALIZAR_CLI_SEG_MERCADO;
CREATE PUBLIC SYNONYM ATUALIZAR_FATURAMENTO_PREVISTO FOR USER_DEV.ATUALIZAR_FATURAMENTO_PREVISTO;
CREATE PUBLIC SYNONYM EXCLUIR_CLIENTE FOR USER_DEV.EXCLUIR_CLIENTE;

CREATE PUBLIC SYNONYM CLIENTE FOR USER_DEV.CLIENTE;


-- Para procedures
CREATE PUBLIC SYNONYM INCLUINDO_PRODUTO FOR USER_DEV.INCLUINDO_PRODUTO;
CREATE PUBLIC SYNONYM INCLUINDO_DADOS_VENDA FOR USER_DEV.INCLUINDO_DADOS_VENDA;

-- Para tabelas
CREATE PUBLIC SYNONYM PRODUTO_VENDA_EXERCICIO FOR USER_DEV.PRODUTO_VENDA_EXERCICIO;
CREATE PUBLIC SYNONYM PRODUTO_EXERCICIO FOR USER_DEV.PRODUTO_EXERCICIO;




